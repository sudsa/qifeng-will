spring:
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 0
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
      properties:
        partitioner:
          class: com.hanxiaozhang.configway.CustomizePartitioner
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      max-poll-records: 50 #设置批量消费每次消费多少数量消息
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      missing-topics-fatal: false
      type: batch #设置批量模式


#    # 在考虑结束之前等待的时间
#    close-timeout: 15s
#    # 默认代理URL是否应该在内存中。如果指定了显式代理，则忽略此值。
#    in-memory: true
#    # 是否在回滚回滚消息之前停止消息传递。这意味着当启用此命令时，消息顺序不会被保留。
#    non-blocking-redelivery: false
#    # 等待消息发送响应的时间。设置为0等待永远。
#    send-timeout: 0
#
#    # 包
#    packages:
#      # 是否信任所有包
#      trust-all: true
#      # 要信任的特定包的逗号分隔列表（当不信任所有包时）
#      trusted:
#
#    # 连接池
#    pool:
#     # 当连接请求和池满时是否阻塞。设置false会抛“JMSException异常”。
#     block-if-full: true
#     # 如果池仍然满，则在抛出异常前阻塞时间。
#     block-if-full-timeout: -1ms
#     # 是否在启动时创建连接。可以在启动时用于加热池。
#     create-connection-on-startup: true
#     # 是否用Pooledconnectionfactory代替普通的ConnectionFactory。
#     enabled: false
#     # 连接过期超时。
#     expiry-timeout: 0ms
#     # 连接空闲超时
#     idle-timeout: 30s
#     # 连接池最大连接数
#     max-connections: 1
#     # 每个连接的有效会话的最大数目。
#     maximum-active-session-per-connection: 500
#     # 当有"JMSException"时尝试重新连接
#     reconnect-on-exception: true
#     # 在空闲连接清除线程之间运行的时间。当为负数时，没有空闲连接驱逐线程运行。
#     time-between-expiration-check: -1ms
#     # 是否只使用一个MessageProducer
#     use-anonymous-producers: true
