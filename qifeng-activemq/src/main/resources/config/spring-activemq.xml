<?xml version="1.0" encoding="UTF-8"?>  
<beans  xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context" 
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="classpath:config/activemq.properties"/>
    
    <!-- 1. 配置ActiveMQ 连接工厂 -->
    <!-- 1.1 ActiveMQ 连接工厂 -->
    <bean id="myConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <!-- ActiveMQ Address -->
        <property name="brokerURL" value="${amq.broker.url}"/>
        <property name="userName" value="${amq.username}"/>
        <property name="password" value="${amq.password}"/>
        <!-- 引用重发机制 -->
        <property name="redeliveryPolicy" ref="activeMQRedeliveryPolicy" />
    </bean>

    <!-- 1.2 定义Redelivery(重发机制)机制 -->
    <bean id="activeMQRedeliveryPolicy" class="org.apache.activemq.RedeliveryPolicy">
        <!--是否在每次尝试重新发送失败后,增长这个等待时间 -->
        <property name="useExponentialBackOff" value="false"></property>
        <!--重发次数,默认为6次 -->
        <property name="maximumRedeliveries" value="3"></property>
        <!--重发时间间隔,默认为1秒 -->
        <property name="initialRedeliveryDelay" value="1000"></property>
        <!--第一次失败后重新发送之前等待500毫秒,第二次失败再等待500 * 2毫秒,这里的2就是value -->
        <property name="backOffMultiplier" value="2"></property>
        <!--最大传送延迟，只在useExponentialBackOff为true时有效（V5.5），
            假设首次重连间隔为10ms，倍数为2，那么第二次重连时间间隔为 20ms，
            第三次重连时间间隔为40ms，当重连时间间隔大的最大重连时间间隔时，
            以后每次重连时间间隔都为最大重连时间间隔。 -->
        <property name="maximumRedeliveryDelay" value="1000"></property>
    </bean>

    <!-- 1.3 定义ActiveMQ连接池-->
    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
    destroy-method="stop">
        <property name="connectionFactory" ref="myConnectionFactory"/>
        <property name="maxConnections" value="${amq.max.connections}"></property>
    </bean>

    <!-- 1.4 Spring用于管理真正的ConnectionFactory -->
    <bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
        <property name="targetConnectionFactory" ref="pooledConnectionFactory"/>
        <!-- Session缓存数量 -->
        <property name="sessionCacheSize" value="${amq.session.cache.size}" />
    </bean>

    <!-- 2. 配置JMS消息目的地 -->
    <bean id="myDestinationQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg index="0" value="${amq.queue}"/>
    </bean>


    <!-- 3. 使用JmsTemplate模板 -->
    <bean id="jmsQueueTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->  
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="defaultDestination" ref="myDestinationQueue"></property>
        <!-- 非pub/sub模型（发布/订阅），即队列模式 -->
        <property name="pubSubDomain" value="true" />
    </bean>

    <!--4. JMS消息发送 -->
    <bean id="sendService" class="com.hanxiaozhang.springxml.JmsSender">
         <!--依赖注入JmsTemplate模板 -->
        <property name="jmsQueueTemplate" ref="jmsQueueTemplate"/>
    </bean>

    <!--5. JMS消息接收 -->
    <bean id="jmsReceiver" class="com.hanxiaozhang.springxml.JmsReceiver">
    </bean>

    <!-- 6. ListenerContainer 消息监听器-->
    <bean id="listenerContainer"  class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="pooledConnectionFactory"></property>
        <property name="destination" ref="myDestinationQueue"></property>
        <property name="messageListener" ref="jmsReceiver"></property>
        <!-- 应答模式-->
        <!-- SESSION_TRANSACTED = 0  事务提交并确认 ，AUTO_ACKNOWLEDGE = 1 自动确认
             CLIENT_ACKNOWLEDGE = 2  客户端手动确认 ，DUPS_OK_ACKNOWLEDGE = 3  自动批量确认
             INDIVIDUAL_ACKNOWLEDGE = 4 单条消息确认（AcitveMQ补充的） -->
        <!--网上教程说可以把应答机制配置在模板上，但是我测试不生效，故配置在监听器中20190718-->
        <property name="sessionAcknowledgeMode" value="2" />
        <!--设置固定的并行消费者数量-->
        <property name="concurrentConsumers" value="${amq.concurrent.consumers}"></property>
        <!--设置动态的并行消费者数量-->
        <property name="concurrency" value="${amq.concurrency}"></property>
        <!--设置最大的并行消费者数量-->
        <property name="maxConcurrentConsumers" value="${amq.max.concurrent.consumers}"></property>
    </bean>


</beans>